TestCase subclass: #AlgoFixTestAlumno	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Tests'!!AlgoFixTestAlumno methodsFor: 'tests' stamp: 'Jony 5/24/2020 01:38'!test10PresupuestoManosDeRodilloNulos	| algoFix alba  presupuesto valorEsperado |		algoFix := AlgoFix new.		algoFix registrarPintorDeRodillo: 'Diego' conValorHora: 20000.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 2 manosPincel: 1000 manosRodillo: 0.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(0) 		masMateriales: 			(0).	self assert: 'Diego' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTestAlumno methodsFor: 'tests' stamp: 'Jony 5/24/2020 01:31'!test02PresupuestoConRodilloConManoDeObraGratuita	| algoFix alba  presupuesto valorEsperado |		algoFix := AlgoFix new.		algoFix registrarPintorDeRodillo: 'Diego' conValorHora: 0.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 2 manosPincel: 1 manosRodillo: 2.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(0) 		masMateriales: 			(5 "M2" * 5 "litros" * 2 "Precio" * 2 "manos").	self assert: 'Diego' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTestAlumno methodsFor: 'tests' stamp: 'Jony 5/24/2020 01:39'!test13PresupuestoDePincelConPintoresQueSeLlamanIgual	| algoFix alba  presupuesto valorEsperado |		algoFix := AlgoFix new.		algoFix registrarPintorDePincel: 'Pepe' conValorHora: 20000.	algoFix registrarPintorDePincel: 'Pepe' conValorHora: 30000.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 2 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(5 "M2" * 2 "horas" * 20000 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 4 "litros" * 2 "Precio" * 1 "manos").	self assert: 'Pepe' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTestAlumno methodsFor: 'tests' stamp: 'Jony 5/24/2020 01:37'!test09PresupuestoManosDePincelNulos	| algoFix alba  presupuesto valorEsperado |		algoFix := AlgoFix new.		algoFix registrarPintorDePincel: 'Diego' conValorHora: 20000.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 2 manosPincel: 0 manosRodillo: 1000.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(0) 		masMateriales: 			(0).	self assert: 'Diego' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTestAlumno methodsFor: 'tests' stamp: 'Jony 5/24/2020 01:36'!test07PresupuestoConPrecioConPincelPorLitroGratuito	| algoFix alba  presupuesto valorEsperado |		algoFix := AlgoFix new.		algoFix registrarPintorDePincel: 'Diego' conValorHora: 20000.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 0 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(5 "M2" * 2 "horas" * 20000 "Precio" * 1 "manos") 		masMateriales: 			(0).	self assert: 'Diego' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTestAlumno methodsFor: 'tests' stamp: 'Jony 5/24/2020 01:31'!test01PresupuestoConPincelConManoDeObraGratuita	| algoFix alba  presupuesto valorEsperado |		algoFix := AlgoFix new.		algoFix registrarPintorDePincel: 'Diego' conValorHora: 0.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 2 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(0) 		masMateriales: 			(5 "M2" * 4 "litros" * 2 "Precio" * 1 "manos").	self assert: 'Diego' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTestAlumno methodsFor: 'tests' stamp: 'Jony 5/24/2020 01:43'!test18PresupuestoConMetrosCuadradosNulos	| algoFix alba  presupuesto valorEsperado |		algoFix := AlgoFix new.		algoFix registrarPintorDeRodillo: 'Diego' conValorHora: 20000.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 9999 manosPincel: 10000 manosRodillo: 1000.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 0 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(0) 		masMateriales: 			(0).	self assert: 'Diego' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTestAlumno methodsFor: 'tests' stamp: 'Jony 5/24/2020 01:40'!test14PresupuestoDeRodilloConPintoresQueSeLlamanIgual	| algoFix alba  presupuesto valorEsperado |		algoFix := AlgoFix new.		algoFix registrarPintorDeRodillo: 'Pepe' conValorHora: 20000.	algoFix registrarPintorDeRodillo: 'Pepe' conValorHora: 30000.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 2 manosPincel: 1 manosRodillo: 2.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(5 "M2" * 1 "horas" * 20000 "Precio" * 2 "manos") 		masMateriales: 			(5 "M2" * 5 "litros" * 2 "Precio" * 2 "manos").	self assert: 'Pepe' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTestAlumno methodsFor: 'tests' stamp: 'Jony 5/24/2020 01:33'!test04PresupuestoConPincelDosPintoresDeMismoPrecioTomaElPrimeroRegistrado	| algoFix alba  presupuesto valorEsperado |		algoFix := AlgoFix new.		algoFix registrarPintorDePincel: 'Diego' conValorHora: 20000.	algoFix registrarPintorDePincel: 'Jose' conValorHora: 20000.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 2 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(5 "M2" * 2 "horas" * 20000 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 4 "litros" * 2 "Precio" * 1 "manos").	self assert: 'Diego' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTestAlumno methodsFor: 'tests' stamp: 'Jony 5/24/2020 01:38'!test11PresupuestoConPintorDePincelSinNombreOfreceElMejorSerivicioPorPoco	| algoFix alba  presupuesto valorEsperado |		algoFix := AlgoFix new.		algoFix registrarPintorDePincel: '' conValorHora: 20000.	algoFix registrarPintorDePincel: 'Pepe' conValorHora: (20000.000001).	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 2 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(5 "M2" * 2 "horas" * 20000 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 4 "litros" * 2 "Precio" * 1 "manos").	self assert: '' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTestAlumno methodsFor: 'tests' stamp: 'Jony 5/24/2020 01:35'!test05PresupuestoConPintorDePincelSinNombreFunciona	| algoFix alba  presupuesto valorEsperado |		algoFix := AlgoFix new.		algoFix registrarPintorDePincel: '' conValorHora: 20000.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 2 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(5 "M2" * 2 "horas" * 20000 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 4 "litros" * 2 "Precio" * 1 "manos").	self assert: '' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTestAlumno methodsFor: 'tests' stamp: 'Jony 5/24/2020 01:36'!test08PresupuestoConPrecioConRodilloPorLitroGratuito	| algoFix alba  presupuesto valorEsperado |		algoFix := AlgoFix new.		algoFix registrarPintorDeRodillo: 'Diego' conValorHora: 20000.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 0 manosPincel: 1 manosRodillo: 2.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(5 "M2" * 1 "horas" * 20000 "Precio" * 2 "manos") 		masMateriales: 			(0).	self assert: 'Diego' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTestAlumno methodsFor: 'tests' stamp: 'Jony 5/24/2020 01:33'!test03PresupuestoConRodilloDosPintoresDeMismoPrecioTomaElPrimeroRegistrado	| algoFix alba  presupuesto valorEsperado |		algoFix := AlgoFix new.		algoFix registrarPintorDeRodillo: 'Diego' conValorHora: 20000.	algoFix registrarPintorDeRodillo: 'Jose' conValorHora: 20000.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 2 manosPincel: 1 manosRodillo: 2.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(5 "M2" * 1 "horas" * 20000 "Precio" * 2 "manos") 		masMateriales: 			(5 "M2" * 5 "litros" * 2 "Precio" * 2 "manos").	self assert: 'Diego' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTestAlumno methodsFor: 'tests' stamp: 'Jony 5/24/2020 13:08'!test20PresupuestoConMetrosCuadradosNegativosLevantaError	| algoFix presupuesto trigger |	algoFix := AlgoFix new.	trigger := false.	algoFix registrarPintorDeRodillo: 'Diego' conValorHora: 20000.		[presupuesto := algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: -5 conPintura: 'Placeholder'.	] on: ErrorNumeroNegativo do: [ trigger := true. ].	self assert: trigger.! !!AlgoFixTestAlumno methodsFor: 'tests' stamp: 'Jony 5/24/2020 01:39'!test12PresupuestoConRodilloDePincelSinNombreOfreceElMejorSerivicioPorPoco	| algoFix alba  presupuesto valorEsperado |		algoFix := AlgoFix new.		algoFix registrarPintorDeRodillo: '' conValorHora: 20000.	algoFix registrarPintorDeRodillo: 'Pepe' conValorHora: (20000.000001).	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 2 manosPincel: 1 manosRodillo: 2.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(5 "M2" * 1 "horas" * 20000 "Precio" * 2 "manos") 		masMateriales: 			(5 "M2" * 5 "litros" * 2 "Precio" * 2 "manos").	self assert: '' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTestAlumno methodsFor: 'tests' stamp: 'Jony 5/24/2020 01:35'!test06PresupuestoConPintorDeRodilloSinNombreFunciona	| algoFix alba  presupuesto valorEsperado |		algoFix := AlgoFix new.		algoFix registrarPintorDeRodillo: '' conValorHora: 20000.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 2 manosPincel: 1 manosRodillo: 2.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(5 "M2" * 1 "horas" * 20000 "Precio" * 2 "manos")		masMateriales: 			(5 "M2" * 5 "litros" * 2 "Precio" * 2 "manos").	self assert: '' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTestAlumno methodsFor: 'tests' stamp: 'Jony 5/24/2020 16:35'!test21ManoDeObraConValoresNegativosLevantaError	| algoFix numero trigger |	algoFix := AlgoFix new.		trigger := 0.		[numero := algoFix manoDeObra: -5 masMateriales: 5.	] on: ErrorNumeroNegativo do: [ trigger := trigger + 1. ].	[numero := algoFix manoDeObra: 5 masMateriales: -5.	] on: ErrorNumeroNegativo do: [ trigger := trigger + 1. ].	[numero := algoFix manoDeObra: -5 masMateriales: -5.	] on: ErrorNumeroNegativo do: [ trigger := trigger + 1. ].	[numero := algoFix manoDeObra: 0 masMateriales: 5.	] on: ErrorNumeroNegativo do: [ trigger := trigger + 10. ].	self assert: (trigger = 3).! !!AlgoFixTestAlumno methodsFor: 'tests' stamp: 'Jony 5/24/2020 17:37'!test15PresupuestoSinHaberRegistradoPintores	| algoFix alba presupuesto trigger |		trigger := false.	algoFix := AlgoFix new.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 2 manosPincel: 1 manosRodillo: 1.	[ presupuesto := algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba	] on: ErrorNoHayPintoresIngresados do: [ trigger := true. ].		self assert: trigger.! !!AlgoFixTestAlumno methodsFor: 'running' stamp: 'Jony 5/24/2020 16:26'!setUp	precision := 0.0001.! !TestCase subclass: #PintorTestAlumno	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!PintorTestAlumno methodsFor: 'tests' stamp: 'Jony 5/24/2020 16:29'!test02PintorUtilizaRodilloConCostoPorHoraNegativoLevantaError	| algoFix trigger |	algoFix := AlgoFix new.	trigger := false.	[ algoFix registrarPintorDeRodillo: 'Diego' conValorHora: -500.	] on: ErrorNumeroNegativo do: [ trigger := true. ].	self assert: trigger.! !!PintorTestAlumno methodsFor: 'tests' stamp: 'Jony 5/24/2020 16:28'!test01PintorUtilizaPincelConCostoPorHoraNegativoLevantaError	| algoFix trigger |	algoFix := AlgoFix new.	trigger := false.	[ algoFix registrarPintorDePincel: 'Diego' conValorHora: -500.	] on: ErrorNumeroNegativo do: [ trigger := true. ].	self assert: trigger.! !TestCase subclass: #PinturaTestAlumno	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!PinturaTestAlumno methodsFor: 'tests' stamp: 'Jony 5/24/2020 17:31'!test04CrearPinturaNoPasandoNumeroEnManosDePincelLevantaError	| algoFix alba trigger |	algoFix := AlgoFix new.		trigger := false.		[alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 1 manosPincel: 'Placeholder' manosRodillo: 1.	] on: ErrorNotANumber do: [ trigger := true. ].	self assert: trigger.! !!PinturaTestAlumno methodsFor: 'tests' stamp: 'Jony 5/24/2020 17:30'!test03CrearPinturaNoPasandoNumeroEnPrecioLevantaError	| algoFix alba trigger |	algoFix := AlgoFix new.		trigger := false.		[alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 'Placeholder' manosPincel: 1 manosRodillo: 1.	] on: ErrorNotANumber do: [ trigger := true. ].	self assert: trigger.! !!PinturaTestAlumno methodsFor: 'tests' stamp: 'Jony 5/24/2020 16:32'!test02CrearPinturaConValoresNegativosLevantaError	| algoFix pintura trigger |	algoFix := AlgoFix new.		trigger := 0.		[pintura := algoFix crearPintura: 'test1' conPrecioPorLitro: -1 manosPincel: 1 manosRodillo: 1.	] on: ErrorNumeroNegativo do: [ trigger := trigger + 1. ].	[pintura := algoFix crearPintura: 'test2' conPrecioPorLitro: -1 manosPincel: -1 manosRodillo: 1.	] on: ErrorNumeroNegativo do: [ trigger := trigger + 1. ].	[pintura := algoFix crearPintura: 'test3' conPrecioPorLitro: 1 manosPincel: 1 manosRodillo: -1.	] on: ErrorNumeroNegativo do: [ trigger := trigger + 1. ].	[pintura := algoFix crearPintura: 'test4' conPrecioPorLitro: 1 manosPincel: 1 manosRodillo: 1.	] on: ErrorNumeroNegativo do: [ trigger := trigger + 10. ].	self assert: (trigger = 3).! !!PinturaTestAlumno methodsFor: 'tests' stamp: 'Jony 5/24/2020 17:28'!test01CrearPinturaConPrecioPorLitroNegativoLevantaError	| algoFix alba trigger |	algoFix := AlgoFix new.		trigger := false.		[alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: -500 manosPincel: 1 manosRodillo: 1.	] on: ErrorNumeroNegativo do: [ trigger := true. ].	self assert: trigger.! !