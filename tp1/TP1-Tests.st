TestCase subclass: #AlgoFixTestAlumno	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Tests'!!AlgoFixTestAlumno methodsFor: 'tests' stamp: 'Jony 5/25/2020 18:41'!test05NoAceptaNilComoMetrosCuadrados	| algoFix alba  presupuesto trigger |		algoFix := AlgoFix new.	trigger := false.	algoFix registrarPintorDeRodillo: 'Diego' conValorHora: 20000.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 9999 manosPincel: 10000 manosRodillo: 1000.	[presupuesto := algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: nil conPintura: alba.]	on: ErrorNilValueGiven do: [ trigger := true. ].		self assert: trigger.! !!AlgoFixTestAlumno methodsFor: 'tests' stamp: 'Jony 5/27/2020 13:36'!test01AlgoFixLevantaErrorYaQueNoSeRegistraronPintores	| algoFix alba presupuesto trigger |		trigger := false.	algoFix := AlgoFix new.	alba := algoFix  crearPintura: 'Alba' conPrecioPorLitro: 2 manosPincel: 1 manosRodillo: 1.	[ presupuesto := algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba	] on: ErrorNoHayPintoresIngresados do: [ trigger := true. ].		self assert: trigger.! !!AlgoFixTestAlumno methodsFor: 'tests' stamp: 'Jony 5/27/2020 13:38'!test04ManoDeObraSinNumerosLevantaError	| algoFix  numero trigger |	algoFix := AlgoFix new.		trigger := 0.	[numero := algoFix manoDeObra: 'a' masMateriales: 5.	] on: ErrorNotANumber do: [ trigger := trigger + 1. ].	[numero := algoFix manoDeObra: 1 masMateriales: 'a'.	] on: ErrorNotANumber do: [ trigger := trigger + 1. ].	[numero := algoFix manoDeObra: 'a' masMateriales: 'a'.	] on: ErrorNotANumber do: [ trigger := trigger + 1. ].	[numero := algoFix manoDeObra: 5 masMateriales: 5.	] on: ErrorNumeroNegativo do: [ trigger := trigger + 10. ].	self assert: (trigger = 3).! !!AlgoFixTestAlumno methodsFor: 'tests' stamp: 'Jony 5/27/2020 22:26'!test07PresupuestoPintorUtilizaRodilloOfreceElMenorPresupuestoAnteOtrosDePincel	| algoFix alba  presupuesto valorEsperado |	algoFix := AlgoFix new.	algoFix registrarPintorDeRodillo: 'Diego' conValorHora: 500.	algoFix registrarPintorDePincel: 'nope1' conValorHora: 200.	algoFix registrarPintorDePincel: 'nope2' conValorHora: 200.	algoFix registrarPintorDePincel: 'nope3' conValorHora: 200.	algoFix registrarPintorDePincel: 'nope4' conValorHora: 200.	algoFix registrarPintorDePincel: 'nope5' conValorHora: 200.	algoFix registrarPintorDePincel: 'nope6' conValorHora: 200.	algoFix registrarPintorDePincel: 'nope7' conValorHora: 200.		alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 2000 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(5 "M2" * 1 "horas" * 500 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 5 "litros" * 200 "Precio" * 1 "manos").	self assert: 'Diego' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTestAlumno methodsFor: 'tests' stamp: 'Jony 5/27/2020 15:46'!test08PresupuestoPintorConPincelNoHaceDescuendoDel50PorcientoPorPoco	| algoFix venier presupuesto valorEsperadoConAlba |	algoFix := AlgoFix new.		algoFix registrarPintorDePincel: 'Diego' conValorHora: 200.		venier := algoFix crearPintura: 'Venier' conPrecioPorLitro: 100 manosPincel: 10 manosRodillo: 20.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 39.999 conPintura: venier.		valorEsperadoConAlba := algoFix  		manoDeObra: 			(39.999  "M2" * 2 "horas" * 200 "Precio" * 10 "manos") 		masMateriales: 			(39.999  "M2" * 4 "litros" * 100 "Precio" * 10 "manos").	self assert: 'Diego' equals: (presupuesto responsable).	self assert: valorEsperadoConAlba closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTestAlumno methodsFor: 'tests' stamp: 'Jony 5/27/2020 14:18'!test06PresupuestoPintorUtilizaPincelOfreceElMenorPresupuestoAnteOtrosDeRodillo	| algoFix alba  presupuesto valorEsperado |	algoFix := AlgoFix new.	algoFix registrarPintorDePincel: 'Diego' conValorHora: 500.	algoFix registrarPintorDeRodillo: 'nope1' conValorHora: 501.	algoFix registrarPintorDeRodillo: 'nope2' conValorHora: 502.	algoFix registrarPintorDeRodillo: 'nope3' conValorHora: 503.	algoFix registrarPintorDeRodillo: 'nope4' conValorHora: 504.	algoFix registrarPintorDeRodillo: 'nope5' conValorHora: 505.	algoFix registrarPintorDeRodillo: 'nope6' conValorHora: 506.	algoFix registrarPintorDeRodillo: 'nope7' conValorHora: 507.		alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 2.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(5 "M2" * 2 "horas" * 500 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 4 "litros" * 200 "Precio" * 1 "manos").	self assert: 'Diego' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTestAlumno methodsFor: 'tests' stamp: 'Jony 5/27/2020 15:46'!test10PresupuestoPintorConPincelUtilizanDiferentesPinturasNoHacenDescuendoDel50PorcientoPorPoco	| algoFix venier presupuesto1 presupuesto2 presupuesto3 valorEsperado1 valorEsperado2 valorEsperado3 alba px |	algoFix := AlgoFix new.		algoFix registrarPintorDePincel: 'Diego' conValorHora: 200.		venier := algoFix crearPintura: 'Venier' conPrecioPorLitro: 100 manosPincel: 10 manosRodillo: 20.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 10 manosRodillo: 20.	px := algoFix crearPintura: 'PinturaX' conPrecioPorLitro: 300 manosPincel: 10 manosRodillo: 20.	presupuesto1 := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 39.999 conPintura: venier.		valorEsperado1 := algoFix  		manoDeObra: 			(39.999  "M2" * 2 "horas" * 200 "Precio" * 10 "manos") 		masMateriales: 			(39.999  "M2" * 4 "litros" * 100 "Precio" * 10 "manos").				presupuesto2 := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 39.999 conPintura: alba.		"El descuento del %50 lo hacen los pintores con pincel!!"	valorEsperado2 := algoFix  		manoDeObra: 			(39.999  "M2" * 2 "horas" * 200 "Precio" * 10 "manos") 		masMateriales: 			(39.999  "M2" * 4 "litros" * 200 "Precio" * 10 "manos").				presupuesto3 := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 39.999 conPintura: px.		"El descuento del %50 lo hacen los pintores con pincel!!"	valorEsperado3 := algoFix  		manoDeObra: 			(39.999  "M2" * 2 "horas" * 200 "Precio" * 10 "manos") 		masMateriales: 			(39.999  "M2" * 4 "litros" * 300 "Precio" * 10 "manos").				self assert: 'Diego' equals: (presupuesto1 responsable).	self assert: 'Diego' equals: (presupuesto2 responsable).	self assert: 'Diego' equals: (presupuesto3 responsable).	self assert: valorEsperado1 closeTo: (presupuesto1 valor) precision: precision.	self assert: valorEsperado2 closeTo: (presupuesto2 valor) precision: precision.	self assert: valorEsperado3 closeTo: (presupuesto3 valor) precision: precision.	! !!AlgoFixTestAlumno methodsFor: 'tests' stamp: 'Jony 5/27/2020 13:38'!test03ManoDeObraConValoresNegativosLevantaError	| algoFix  numero trigger |	algoFix := AlgoFix new.		trigger := 0.		[numero := algoFix manoDeObra: -5 masMateriales: 5.	] on: ErrorNumeroNegativo do: [ trigger := trigger + 1. ].	[numero := algoFix manoDeObra: 5 masMateriales: -5.	] on: ErrorNumeroNegativo do: [ trigger := trigger + 1. ].	[numero := algoFix manoDeObra: -5 masMateriales: -5.	] on: ErrorNumeroNegativo do: [ trigger := trigger + 1. ].	[numero := algoFix manoDeObra: 0 masMateriales: 5.	] on: ErrorNumeroNegativo do: [ trigger := trigger + 10. ].	self assert: (trigger = 3).! !!AlgoFixTestAlumno methodsFor: 'tests' stamp: 'Jony 5/27/2020 13:38'!test02AlgoFixConMetrosCuadradosNegativosLevantaError	| algoFix  presupuesto trigger |	algoFix := AlgoFix new.	trigger := false.	algoFix registrarPintorDeRodillo: 'Diego' conValorHora: 20000.		[presupuesto := algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: -5 conPintura: 'Placeholder'.	] on: ErrorNumeroNegativo do: [ trigger := true. ].	self assert: trigger.! !!AlgoFixTestAlumno methodsFor: 'tests' stamp: 'Jony 5/27/2020 15:46'!test09PresupuestoPintorConRodilloNoHaceDescuendoDel50PorcientoPorPoco	| algoFix venier presupuesto valorEsperadoConAlba |	algoFix := AlgoFix new.		algoFix registrarPintorDeRodillo: 'Diego' conValorHora: 200.		venier := algoFix crearPintura: 'Venier' conPrecioPorLitro: 100 manosPincel: 10 manosRodillo: 20.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 39.999 conPintura: venier.		valorEsperadoConAlba := algoFix  		manoDeObra: 			(39.999  "M2" * 1 "horas" * 200 "Precio" * 20 "manos") 		masMateriales: 			(39.999  "M2" * 5 "litros" * 100 "Precio" * 20 "manos").	self assert: 'Diego' equals: (presupuesto responsable).	self assert: valorEsperadoConAlba closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTestAlumno methodsFor: 'tests' stamp: 'Jony 5/27/2020 15:46'!test11PresupuestoPintorConRodilloUtilizanDiferentesPinturasNoHacenDescuendoDel50PorcientoPorPoco	| algoFix venier presupuesto1 presupuesto2 presupuesto3 valorEsperado1 valorEsperado2 valorEsperado3 alba px |	algoFix := AlgoFix new.		algoFix registrarPintorDeRodillo: 'Diego' conValorHora: 200.		venier := algoFix crearPintura: 'Venier' conPrecioPorLitro: 100 manosPincel: 20 manosRodillo: 10.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 20 manosRodillo: 10.	px := algoFix crearPintura: 'PinturaX' conPrecioPorLitro: 300 manosPincel: 20 manosRodillo: 10.	presupuesto1 := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 39.999 conPintura: venier.		valorEsperado1 := algoFix  		manoDeObra: 			(39.999  "M2" * 1 "horas" * 200 "Precio" * 10 "manos") 		masMateriales: 			(39.999  "M2" * 5 "litros" * 100 "Precio" * 10 "manos").				presupuesto2 := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 39.999 conPintura: alba.		"El descuento del %50 lo hacen los pintores con pincel!!"	valorEsperado2 := algoFix  		manoDeObra: 			(39.999  "M2" * 1 "horas" * 200 "Precio" * 10 "manos") 		masMateriales: 			(39.999  "M2" * 5 "litros" * 200 "Precio" * 10 "manos").				presupuesto3 := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 39.999 conPintura: px.		"El descuento del %50 lo hacen los pintores con pincel!!"	valorEsperado3 := algoFix  		manoDeObra: 			(39.999  "M2" * 1 "horas" * 200 "Precio" * 10 "manos") 		masMateriales: 			(39.999  "M2" * 5 "litros" * 300 "Precio" * 10 "manos").				self assert: 'Diego' equals: (presupuesto1 responsable).	self assert: 'Diego' equals: (presupuesto2 responsable).	self assert: 'Diego' equals: (presupuesto3 responsable).	self assert: valorEsperado1 closeTo: (presupuesto1 valor) precision: precision.	self assert: valorEsperado2 closeTo: (presupuesto2 valor) precision: precision.	self assert: valorEsperado3 closeTo: (presupuesto3 valor) precision: precision.	! !!AlgoFixTestAlumno methodsFor: 'running' stamp: 'Jony 5/27/2020 13:46'!setUp	precision := 0.0001.! !TestCase subclass: #PintorTestAlumno	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Tests'!!PintorTestAlumno methodsFor: 'tests' stamp: 'Jony 5/27/2020 13:38'!test03RegistrarPintorDePincelConNilPorParametrosLevantaError	| algoFix  trigger |		algoFix := AlgoFix new.	trigger := 0.	[algoFix registrarPintorDeRodillo: nil conValorHora: 20000.]	on: ErrorNilValueGiven do: [ trigger := trigger + 1. ].		[algoFix registrarPintorDeRodillo: 'Testy' conValorHora: nil.]	on: ErrorNilValueGiven do: [ trigger := trigger + 1. ].		[algoFix registrarPintorDeRodillo: nil conValorHora: nil.]	on: ErrorNilValueGiven do: [ trigger := trigger + 1. ].		[algoFix registrarPintorDeRodillo: 'Nunca mas se supo de el...' conValorHora: 1.]	on: ErrorNilValueGiven do: [ trigger := trigger + 10. ].		self assert: (trigger = 3).! !!PintorTestAlumno methodsFor: 'tests' stamp: 'Jony 5/27/2020 13:38'!test02PintorUtilizaRodilloConCostoPorHoraNegativoLevantaError	| algoFix  trigger |	algoFix := AlgoFix new.	trigger := false.	[ algoFix registrarPintorDeRodillo: 'Diego' conValorHora: -500.	] on: ErrorNumeroNegativo do: [ trigger := true. ].	self assert: trigger.! !!PintorTestAlumno methodsFor: 'tests' stamp: 'Jony 5/27/2020 15:19'!test04MismoPintorPincelGeneraBienVariosPresupuestosConPinturasDiferentes	| algoFix alba1 alba2 alba3 presupuesto1 presupuesto2 presupuesto3 valorEsperado1 valorEsperado2 valorEsperado3 |		algoFix := AlgoFix new.		algoFix registrarPintorDePincel: 'Porfavorapruebenmejaja' conValorHora: 20000.	alba1 := algoFix crearPintura: 'test' conPrecioPorLitro: 2 manosPincel: 1 manosRodillo: 1.	alba2 := algoFix crearPintura: 'driven' conPrecioPorLitro: 2 manosPincel: 10 manosRodillo: 10.	alba3 := algoFix crearPintura: 'development' conPrecioPorLitro: 2 manosPincel: 100 manosRodillo: 100.		presupuesto1 := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba1.	valorEsperado1 := algoFix		manoDeObra: 			(5 "M2" * 2 "horas" * 20000 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 4 "litros" * 2 "Precio" * 1 "manos").				presupuesto2 := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba2.	valorEsperado2 := algoFix		manoDeObra: 			(5 "M2" * 2 "horas" * 20000 "Precio" * 10 "manos") 		masMateriales: 			(5 "M2" * 4 "litros" * 2 "Precio" * 10 "manos").	presupuesto3 := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba3.	valorEsperado3 := algoFix		manoDeObra: 			(5 "M2" * 2 "horas" * 20000 "Precio" * 100 "manos") 		masMateriales: 			(5 "M2" * 4 "litros" * 2 "Precio" * 100 "manos").	self assert: 'Porfavorapruebenmejaja' equals: (presupuesto1 responsable).	self assert: 'Porfavorapruebenmejaja' equals: (presupuesto2 responsable).	self assert: 'Porfavorapruebenmejaja' equals: (presupuesto3 responsable).	self assert: valorEsperado1 closeTo: (presupuesto1 valor) precision: precision.	self assert: valorEsperado2 closeTo: (presupuesto2 valor) precision: precision.	self assert: valorEsperado3 closeTo: (presupuesto3 valor) precision: precision.! !!PintorTestAlumno methodsFor: 'tests' stamp: 'Jony 5/27/2020 13:38'!test01PintorUtilizaPincelConCostoPorHoraNegativoLevantaError	| algoFix  trigger |	algoFix := AlgoFix new.	trigger := false.	[ algoFix registrarPintorDePincel: 'Diego' conValorHora: -500.	] on: ErrorNumeroNegativo do: [ trigger := true. ].	self assert: trigger.! !!PintorTestAlumno methodsFor: 'tests' stamp: 'Jony 5/27/2020 15:19'!test05MismoPintorRodilloGeneraBienVariosPresupuestosConPinturasDiferentes	| algoFix alba1 alba2 alba3 presupuesto1 presupuesto2 presupuesto3 valorEsperado1 valorEsperado2 valorEsperado3 |		algoFix := AlgoFix new.		algoFix registrarPintorDeRodillo: 'Porfavorapruebenmejaja' conValorHora: 20000.	alba1 := algoFix crearPintura: 'test' conPrecioPorLitro: 2 manosPincel: 1 manosRodillo: 1.	alba2 := algoFix crearPintura: 'driven' conPrecioPorLitro: 2 manosPincel: 10 manosRodillo: 10.	alba3 := algoFix crearPintura: 'development' conPrecioPorLitro: 2 manosPincel: 100 manosRodillo: 100.		presupuesto1 := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba1.	valorEsperado1 := algoFix		manoDeObra: 			(5 "M2" * 1 "horas" * 20000 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 5 "litros" * 2 "Precio" * 1 "manos").				presupuesto2 := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba2.	valorEsperado2 := algoFix		manoDeObra: 			(5 "M2" * 1 "horas" * 20000 "Precio" * 10 "manos") 		masMateriales: 			(5 "M2" * 5 "litros" * 2 "Precio" * 10 "manos").	presupuesto3 := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba3.	valorEsperado3 := algoFix		manoDeObra: 			(5 "M2" * 1 "horas" * 20000 "Precio" * 100 "manos") 		masMateriales: 			(5 "M2" * 5 "litros" * 2 "Precio" * 100 "manos").	self assert: 'Porfavorapruebenmejaja' equals: (presupuesto1 responsable).	self assert: 'Porfavorapruebenmejaja' equals: (presupuesto2 responsable).	self assert: 'Porfavorapruebenmejaja' equals: (presupuesto3 responsable).	self assert: valorEsperado1 closeTo: (presupuesto1 valor) precision: precision.	self assert: valorEsperado2 closeTo: (presupuesto2 valor) precision: precision.	self assert: valorEsperado3 closeTo: (presupuesto3 valor) precision: precision.! !!PintorTestAlumno methodsFor: 'running' stamp: 'Jony 5/25/2020 18:55'!setUp	precision := 0.0001.! !TestCase subclass: #PinturaTestAlumno	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Tests'!!PinturaTestAlumno methodsFor: 'tests' stamp: 'Jony 5/27/2020 13:37'!test02CrearPinturaConValoresNegativosLevantaError	| algoFix  pintura trigger |	algoFix := AlgoFix new.		trigger := 0.		[pintura := algoFix crearPintura: 'test1' conPrecioPorLitro: -1 manosPincel: 1 manosRodillo: 1.	] on: ErrorNumeroNegativo do: [ trigger := trigger + 1. ].	[pintura := algoFix crearPintura: 'test2' conPrecioPorLitro: -1 manosPincel: -1 manosRodillo: 1.	] on: ErrorNumeroNegativo do: [ trigger := trigger + 1. ].	[pintura := algoFix crearPintura: 'test3' conPrecioPorLitro: 1 manosPincel: 1 manosRodillo: -1.	] on: ErrorNumeroNegativo do: [ trigger := trigger + 1. ].	[pintura := algoFix crearPintura: 'test4' conPrecioPorLitro: 1 manosPincel: 1 manosRodillo: 1.	] on: ErrorNumeroNegativo do: [ trigger := trigger + 10. ].	self assert: (trigger = 3).! !!PinturaTestAlumno methodsFor: 'tests' stamp: 'Jony 5/27/2020 13:37'!test01CrearPinturaConPrecioPorLitroNegativoLevantaError	| algoFix  alba trigger |	algoFix := AlgoFix new.		trigger := false.		[alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: -500 manosPincel: 1 manosRodillo: 1.	] on: ErrorNumeroNegativo do: [ trigger := true. ].	self assert: trigger.! !!PinturaTestAlumno methodsFor: 'tests' stamp: 'Jony 5/27/2020 13:37'!test04CrearPinturaNoPasandoNumeroEnManosDePincelLevantaError	| algoFix  alba trigger |	algoFix := AlgoFix new.		trigger := false.		[alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 1 manosPincel: 'Placeholder' manosRodillo: 1.	] on: ErrorNotANumber do: [ trigger := true. ].	self assert: trigger.! !!PinturaTestAlumno methodsFor: 'tests' stamp: 'Jony 5/27/2020 13:37'!test03CrearPinturaNoPasandoNumeroEnPrecioLevantaError	| algoFix  alba trigger |	algoFix := AlgoFix new.		trigger := false.		[alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 'Placeholder' manosPincel: 1 manosRodillo: 1.	] on: ErrorNotANumber do: [ trigger := true. ].	self assert: trigger.! !!PinturaTestAlumno methodsFor: 'running' stamp: 'Jony 5/27/2020 13:45'!setUp	precision := 0.0001.! !TestCase subclass: #PresupuestoTestAlumno	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Tests'!!PresupuestoTestAlumno methodsFor: 'tests' stamp: 'Jony 5/24/2020 01:38'!test10PresupuestoManosDeRodilloNulos	| algoFix alba  presupuesto valorEsperado |		algoFix := AlgoFix new.		algoFix registrarPintorDeRodillo: 'Diego' conValorHora: 20000.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 2 manosPincel: 1000 manosRodillo: 0.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(0) 		masMateriales: 			(0).	self assert: 'Diego' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!PresupuestoTestAlumno methodsFor: 'tests' stamp: 'Jony 5/24/2020 01:31'!test02PresupuestoConRodilloConManoDeObraGratuita	| algoFix alba  presupuesto valorEsperado |		algoFix := AlgoFix new.		algoFix registrarPintorDeRodillo: 'Diego' conValorHora: 0.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 2 manosPincel: 1 manosRodillo: 2.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(0) 		masMateriales: 			(5 "M2" * 5 "litros" * 2 "Precio" * 2 "manos").	self assert: 'Diego' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!PresupuestoTestAlumno methodsFor: 'tests' stamp: 'Jony 5/24/2020 01:39'!test13PresupuestoDePincelConPintoresQueSeLlamanIgual	| algoFix alba  presupuesto valorEsperado |		algoFix := AlgoFix new.		algoFix registrarPintorDePincel: 'Pepe' conValorHora: 20000.	algoFix registrarPintorDePincel: 'Pepe' conValorHora: 30000.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 2 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(5 "M2" * 2 "horas" * 20000 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 4 "litros" * 2 "Precio" * 1 "manos").	self assert: 'Pepe' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!PresupuestoTestAlumno methodsFor: 'tests' stamp: 'Jony 5/24/2020 01:37'!test09PresupuestoManosDePincelNulos	| algoFix alba  presupuesto valorEsperado |		algoFix := AlgoFix new.		algoFix registrarPintorDePincel: 'Diego' conValorHora: 20000.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 2 manosPincel: 0 manosRodillo: 1000.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(0) 		masMateriales: 			(0).	self assert: 'Diego' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!PresupuestoTestAlumno methodsFor: 'tests' stamp: 'Jony 5/24/2020 01:36'!test07PresupuestoConPrecioConPincelPorLitroGratuito	| algoFix alba  presupuesto valorEsperado |		algoFix := AlgoFix new.		algoFix registrarPintorDePincel: 'Diego' conValorHora: 20000.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 0 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(5 "M2" * 2 "horas" * 20000 "Precio" * 1 "manos") 		masMateriales: 			(0).	self assert: 'Diego' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!PresupuestoTestAlumno methodsFor: 'tests' stamp: 'Jony 5/24/2020 01:31'!test01PresupuestoConPincelConManoDeObraGratuita	| algoFix alba  presupuesto valorEsperado |		algoFix := AlgoFix new.		algoFix registrarPintorDePincel: 'Diego' conValorHora: 0.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 2 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(0) 		masMateriales: 			(5 "M2" * 4 "litros" * 2 "Precio" * 1 "manos").	self assert: 'Diego' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!PresupuestoTestAlumno methodsFor: 'tests' stamp: 'Jony 5/24/2020 01:40'!test14PresupuestoDeRodilloConPintoresQueSeLlamanIgual	| algoFix alba  presupuesto valorEsperado |		algoFix := AlgoFix new.		algoFix registrarPintorDeRodillo: 'Pepe' conValorHora: 20000.	algoFix registrarPintorDeRodillo: 'Pepe' conValorHora: 30000.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 2 manosPincel: 1 manosRodillo: 2.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(5 "M2" * 1 "horas" * 20000 "Precio" * 2 "manos") 		masMateriales: 			(5 "M2" * 5 "litros" * 2 "Precio" * 2 "manos").	self assert: 'Pepe' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!PresupuestoTestAlumno methodsFor: 'tests' stamp: 'Jony 5/24/2020 01:33'!test04PresupuestoConPincelDosPintoresDeMismoPrecioTomaElPrimeroRegistrado	| algoFix alba  presupuesto valorEsperado |		algoFix := AlgoFix new.		algoFix registrarPintorDePincel: 'Diego' conValorHora: 20000.	algoFix registrarPintorDePincel: 'Jose' conValorHora: 20000.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 2 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(5 "M2" * 2 "horas" * 20000 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 4 "litros" * 2 "Precio" * 1 "manos").	self assert: 'Diego' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!PresupuestoTestAlumno methodsFor: 'tests' stamp: 'Jony 5/25/2020 18:48'!test11PresupuestoConPintorDePincelSinNombreOfreceElMejorSerivicioPorPoco	| algoFix alba  presupuesto valorEsperado |		algoFix := AlgoFix new.		algoFix registrarPintorDePincel: '' conValorHora: 20000.	algoFix registrarPintorDePincel: 'Malasuerte' conValorHora: 20000.00000000001.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 2 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(5 "M2" * 2 "horas" * 20000 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 4 "litros" * 2 "Precio" * 1 "manos").	self assert: '' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!PresupuestoTestAlumno methodsFor: 'tests' stamp: 'Jony 5/24/2020 01:35'!test05PresupuestoConPintorDePincelSinNombreFunciona	| algoFix alba  presupuesto valorEsperado |		algoFix := AlgoFix new.		algoFix registrarPintorDePincel: '' conValorHora: 20000.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 2 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(5 "M2" * 2 "horas" * 20000 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 4 "litros" * 2 "Precio" * 1 "manos").	self assert: '' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!PresupuestoTestAlumno methodsFor: 'tests' stamp: 'Jony 5/25/2020 18:40'!test15PresupuestoConMetrosCuadradosNulos	| algoFix alba  presupuesto valorEsperado |		algoFix := AlgoFix new.		algoFix registrarPintorDeRodillo: 'Diego' conValorHora: 20000.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 9999 manosPincel: 10000 manosRodillo: 1000.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 0 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(0) 		masMateriales: 			(0).	self assert: 'Diego' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!PresupuestoTestAlumno methodsFor: 'tests' stamp: 'Jony 5/24/2020 01:36'!test08PresupuestoConPrecioConRodilloPorLitroGratuito	| algoFix alba  presupuesto valorEsperado |		algoFix := AlgoFix new.		algoFix registrarPintorDeRodillo: 'Diego' conValorHora: 20000.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 0 manosPincel: 1 manosRodillo: 2.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(5 "M2" * 1 "horas" * 20000 "Precio" * 2 "manos") 		masMateriales: 			(0).	self assert: 'Diego' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!PresupuestoTestAlumno methodsFor: 'tests' stamp: 'Jony 5/24/2020 01:33'!test03PresupuestoConRodilloDosPintoresDeMismoPrecioTomaElPrimeroRegistrado	| algoFix alba  presupuesto valorEsperado |		algoFix := AlgoFix new.		algoFix registrarPintorDeRodillo: 'Diego' conValorHora: 20000.	algoFix registrarPintorDeRodillo: 'Jose' conValorHora: 20000.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 2 manosPincel: 1 manosRodillo: 2.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(5 "M2" * 1 "horas" * 20000 "Precio" * 2 "manos") 		masMateriales: 			(5 "M2" * 5 "litros" * 2 "Precio" * 2 "manos").	self assert: 'Diego' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!PresupuestoTestAlumno methodsFor: 'tests' stamp: 'Jony 5/24/2020 01:39'!test12PresupuestoConRodilloDePincelSinNombreOfreceElMejorSerivicioPorPoco	| algoFix alba  presupuesto valorEsperado |		algoFix := AlgoFix new.		algoFix registrarPintorDeRodillo: '' conValorHora: 20000.	algoFix registrarPintorDeRodillo: 'Pepe' conValorHora: (20000.000001).	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 2 manosPincel: 1 manosRodillo: 2.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(5 "M2" * 1 "horas" * 20000 "Precio" * 2 "manos") 		masMateriales: 			(5 "M2" * 5 "litros" * 2 "Precio" * 2 "manos").	self assert: '' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!PresupuestoTestAlumno methodsFor: 'tests' stamp: 'Jony 5/24/2020 01:35'!test06PresupuestoConPintorDeRodilloSinNombreFunciona	| algoFix alba  presupuesto valorEsperado |		algoFix := AlgoFix new.		algoFix registrarPintorDeRodillo: '' conValorHora: 20000.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 2 manosPincel: 1 manosRodillo: 2.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(5 "M2" * 1 "horas" * 20000 "Precio" * 2 "manos")		masMateriales: 			(5 "M2" * 5 "litros" * 2 "Precio" * 2 "manos").	self assert: '' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!PresupuestoTestAlumno methodsFor: 'running' stamp: 'Jony 5/24/2020 16:26'!setUp	precision := 0.0001.! !