Object subclass: #AlgoFix	instanceVariableNames: 'trabajadoresPincel trabajadores presupuesto'	classVariableNames: ''	package: 'TP1'!!AlgoFix methodsFor: 'initialization' stamp: 'Jony 5/17/2020 12:18'!initialize 	trabajadores := OrderedCollection new.	trabajadoresPincel := Dictionary new.! !!AlgoFix methodsFor: 'as yet unclassified' stamp: 'Jony 5/17/2020 01:17'!manoDeObra: n1 masMateriales: n2 	^(n1+n2).! !!AlgoFix methodsFor: 'as yet unclassified' stamp: 'Jony 5/17/2020 12:21'!registrarPintorDePincel: nombre conValorHora: precio 	| worker |	worker := Pintor crearConPrecio: precio yNombre: nombre.		trabajadores add: worker.	trabajadoresPincel at: nombre put: true.	! !!AlgoFix methodsFor: 'as yet unclassified' stamp: 'Jony 5/16/2020 22:47'!crearPintura: color conPrecioPorLitro: precio manosPincel: manosPincel manosRodillo: manosRodillo	| pintura |	pintura := Pintura new.	pintura guardarColor: color.	pintura guardarPrecioPorLitro: precio.	pintura guardarManosDePincel: manosPincel.	pintura guardarManosDeRodillo: manosRodillo.		^(pintura).! !!AlgoFix methodsFor: 'as yet unclassified' stamp: 'Jony 5/17/2020 01:15'!valor	^(presupuesto devolverPrecio).! !!AlgoFix methodsFor: 'as yet unclassified' stamp: 'Jony 5/17/2020 16:52'!presupuestoMasBaratoParaPintarMetrosCuadrados: m2 conPintura: pintura 		| mejorPintor costo esDePincel factorDescuento |		factorDescuento := 1.  "Si tenemos mÃ¡s de 40m2 para pintar, dejamos registrado el descuento"	(m2 > 40) ifTrue: [  factorDescuento  := 1/2. ].			 	esDePincel  := false.	mejorPintor := Pintor buscarMasBarato: trabajadores.		(trabajadoresPincel at: (mejorPintor devolverNombre)) ifTrue: [ costo := (m2 * 2 * (mejorPintor devolverPrecio) * factorDescuento * pintura devolverManosPincel) + (pintura devolverCostoMaterialesConM2: m2 Manos: pintura devolverManosPincel  yLitros: 4). 		].		(trabajadoresPincel at: (mejorPintor devolverNombre)) ifFalse: [ costo := (m2 * 1 * (mejorPintor devolverPrecio) * factorDescuento * pintura devolverManosRodillo) + (pintura devolverCostoMaterialesConM2: m2 Manos: pintura devolverManosRodillo  yLitros: 5). 		].		presupuesto := Presupuesto crearACargoDe: (mejorPintor devolverNombre) conCostoTotal: costo.							! !!AlgoFix methodsFor: 'as yet unclassified' stamp: 'Jony 5/17/2020 12:21'!registrarPintorDeRodillo: nombre conValorHora: precio 		| worker |	worker := Pintor crearConPrecio: precio yNombre: nombre.		trabajadores add: worker.	trabajadoresPincel at: nombre put: false.! !!AlgoFix methodsFor: 'as yet unclassified' stamp: 'Jony 5/17/2020 01:15'!responsable	^(presupuesto devolverNombre).! !Object subclass: #Pintor	instanceVariableNames: 'nombre precioPorHora'	classVariableNames: ''	package: 'TP1'!!Pintor methodsFor: 'as yet unclassified' stamp: 'Jony 5/16/2020 23:37'!guardarNombre: name	nombre := name.! !!Pintor methodsFor: 'as yet unclassified' stamp: 'Jony 5/16/2020 23:37'!guardarCosto: precio 	precioPorHora := precio.! !!Pintor methodsFor: 'as yet unclassified' stamp: 'Jony 5/16/2020 23:18'!devolverPrecio	^(precioPorHora).! !!Pintor methodsFor: 'as yet unclassified' stamp: 'Jony 5/16/2020 23:43'!devolverNombre	^(nombre).! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Pintor class	instanceVariableNames: ''!!Pintor class methodsFor: 'as yet unclassified' stamp: 'Jony 5/16/2020 23:37'!crearConPrecio: precio yNombre: nombre	| pintor |	pintor := self new.	pintor guardarCosto: precio.	pintor guardarNombre: nombre.		^(pintor).! !!Pintor class methodsFor: 'as yet unclassified' stamp: 'Jony 5/17/2020 16:27'!buscarMasBarato: pintores 	| costoPorHora mejorPintor |	mejorPintor := 'Placeholder'.	costoPorHora :=  Float infinity.		pintores  do: [ :pintor |  		(pintor devolverPrecio < costoPorHora) ifTrue: [ 			mejorPintor := pintor.			costoPorHora := pintor devolverPrecio. ]		].		^(mejorPintor).! !Object subclass: #Pintura	instanceVariableNames: 'precioPorLitro color manosDePincel manosDeRodillo'	classVariableNames: ''	package: 'TP1'!!Pintura methodsFor: 'as yet unclassified' stamp: 'Jony 5/17/2020 16:55'!devolverPrecio	^(precioPorLitro).! !!Pintura methodsFor: 'as yet unclassified' stamp: 'Jony 5/16/2020 22:44'!guardarManosDePincel: manosPincel	manosDePincel := manosPincel.! !!Pintura methodsFor: 'as yet unclassified' stamp: 'Jony 5/16/2020 22:45'!guardarManosDeRodillo: manosRodillo 	manosDeRodillo := manosRodillo.! !!Pintura methodsFor: 'as yet unclassified' stamp: 'Jony 5/17/2020 16:56'!devolverManosRodillo	^(manosDeRodillo).! !!Pintura methodsFor: 'as yet unclassified' stamp: 'Jony 5/17/2020 16:53'!devolverCostoMaterialesConM2: m2 Manos: manos yLitros: litros 	^(m2 * litros * precioPorLitro * manos).! !!Pintura methodsFor: 'as yet unclassified' stamp: 'Jony 5/16/2020 22:37'!guardarPrecioPorLitro: precio	precioPorLitro := precio.! !!Pintura methodsFor: 'as yet unclassified' stamp: 'Jony 5/17/2020 16:56'!devolverManosPincel	^(manosDePincel).! !!Pintura methodsFor: 'as yet unclassified' stamp: 'Jony 5/16/2020 22:39'!guardarColor: colorElegido	precioPorLitro := colorElegido.! !Object subclass: #Presupuesto	instanceVariableNames: 'costoTotal pintor'	classVariableNames: ''	package: 'TP1'!!Presupuesto methodsFor: 'as yet unclassified' stamp: 'Jony 5/17/2020 01:18'!devolverNombre 	^(pintor).! !!Presupuesto methodsFor: 'as yet unclassified' stamp: 'Jony 5/16/2020 23:55'!guardarCosto: costo yNombre: nombre	costoTotal := costo.	pintor := nombre.! !!Presupuesto methodsFor: 'as yet unclassified' stamp: 'Jony 5/17/2020 01:20'!devolverPrecio	^(costoTotal).! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Presupuesto class	instanceVariableNames: ''!!Presupuesto class methodsFor: 'as yet unclassified' stamp: 'Jony 5/16/2020 23:58'!crearACargoDe: nombre conCostoTotal: costo		| presupuesto |	presupuesto := self new.	presupuesto guardarCosto: costo yNombre: nombre.	^(presupuesto)	! !